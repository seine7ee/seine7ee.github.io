<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-03T12:37:43.883Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hello, my first blog with hexo</title>
    <link href="http://yoursite.com/2019/06/03/hello-my-first-blog-with-hexo/"/>
    <id>http://yoursite.com/2019/06/03/hello-my-first-blog-with-hexo/</id>
    <published>2019-06-03T12:30:46.000Z</published>
    <updated>2019-06-03T12:37:43.883Z</updated>
    
    <content type="html"><![CDATA[<p>this is my first blog with hexo<br>and I will give some codes bellow, so I can test the what the text display looks like</p><p>def string_op():<br>    str1 = ‘hello, world!’<br>    print(len(str1))</p><pre><code># 获得字符串首字母大写的拷贝 -- 并不是返回原字符串，而是返回其拷贝，则原字符串不变print(&apos;获得字符串首字母大写后的拷贝 : &apos;, str1.capitalize())print(f&apos;看看原来的字符串 : {str1}&apos;)# 获得字符串变大写后的拷贝print(&apos;获得字符串变大写后的拷贝 : &apos;, str1.upper())print(&apos;find location of sub string : &apos;, str1.find(&apos;or&apos;))print(&apos;如果字符串中不存在该子串，那么返回-1 : &apos;, str1.find(&apos;shit&apos;))# 与find类似的查找子串函数，但是如果找不到子串，则会引发异常# print(str1.index(&apos;shit&apos;))print(&apos;index searching : &apos;, str1.index(&apos;or&apos;))print(&apos;检查字符串是否已指定的字符串开头 : &apos;, str1.startswith(&apos;hel&apos;)) # true or falseprint(&apos;检查字符串是否以指定的字符串结尾 : &apos;, str1.endswith(&apos;d!&apos;))print(&apos;将字符串以指定的宽度居中并在两侧填充指定的字符 : \n&apos;, str1.center(50, &apos;*&apos;))print(&apos;将字符串以指定的宽度靠右放置左侧填充指定的字符 : \n&apos;, str1.rjust(50, &quot;*&quot;))# 字符串切片print(str1[2:5])print(str1[1::3])print(str1[::2])print(str1[::-1]) # 逆转字符串print(str1[:-1])str2 = &apos;nlprs201939&apos;print(&apos;判断字符串是否由数字构成 : &apos;, str2.isdigit())print(&apos;判断字符串是否由字母构成 : &apos;, str2.isalpha())print(&apos;判断字符串是否有数字和字母构成 : &apos;, str2.isalnum())str3 = &apos;     seinelee@163.com  &apos;print(str3)print(&apos;获得字符串修剪左右两边空格的拷贝 : &apos;, str3.strip())</code></pre><p>def list_op():<br>    list1 = [1, 3, 5, 7, 100]<br>    print(‘\n=========this is my list1==========\n’)<br>    print(list1)<br>    print(list1[-1])<br>    print(list1[:-1])<br>    print(list1[::-1])<br>    list1[2] = ‘change’<br>    print(‘list1 after change : ‘, list1)</p><pre><code>list1.append(343)# list.insert(index, obj) 用于将指定的对象插入到链表中list1.insert(1, 400)print(list1)list1 += [&apos;cas&apos;, &apos;nlpr&apos;]print(&apos;another edition : &apos;, list1)# list.remove(obj) 移除列表中某个值的第一个匹配值list1.remove(3)print(&apos;after remove 3 in list : &apos;, list1)del list1[0]print(list1)# 清空list1list1.clear()print(list1)print(&apos;\n==========continue do list ==============\n&apos;)fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grape&apos;, &apos;mango&apos;, &apos;strawberry&apos;]fruits += [&apos;pear&apos;, &apos;watermelon&apos;, &apos;pitch&apos;]for fruit in fruits:    print(fruit, end=&apos; &apos;)print()f_list = fruits[1:4]print(f_list)print(&apos;\n===========列表生成式语法创建列表==========\n&apos;)import sys# 用列表的生成表达式语法创建列表容器，这样创建列表之后，元素已经准备就绪所以需要耗费较多的内存空间f = [x for x in range(1, 20)]print(f)f = [x + y for x in &apos;abcde&apos; for y in &apos;ABCDE&apos;]# [&apos;aA&apos;, &apos;aB&apos;, &apos;aC&apos;, &apos;aD&apos;, &apos;aE&apos;, &apos;bA&apos;, &apos;bB&apos;, &apos;bC&apos;, &apos;bD&apos;, &apos;bE&apos;, &apos;cA&apos;, &apos;cB&apos;, &apos;cC&apos;, &apos;cD&apos;, &apos;cE&apos;, &apos;dA&apos;, &apos;dB&apos;, &apos;dC&apos;, &apos;dD&apos;, &apos;dE&apos;, &apos;eA&apos;, &apos;eB&apos;, &apos;eC&apos;, &apos;eD&apos;, &apos;eE&apos;]print(f)f = [x ** 2 for x in range(1, 1000)]print(&apos;这是列表生成式生成的列表对象的大小 ：&apos;, sys.getsizeof(f)) # 查看对象占用内存的字节数print(f)print(&apos;\n========使用生成器对象试试=====\n&apos;)# 使用生成器可以获取到数据但它不会占用的额外的存储空间，注意与列表生成式相对比f = (x ** 2 for x in range(1, 1000))print(&apos;这是生成器对象的大小 : &apos;, sys.getsizeof(f))# 每次需要数据的时候就通过内部的运算得到数据（需要花费额外的时间）mlist = []# 将生成器中的元素存入一个列表for val in f:    mlist.append(val)print(sys.getsizeof(mlist))</code></pre><h1 id="使用生成器生成一个斐波那契数列"><a href="#使用生成器生成一个斐波那契数列" class="headerlink" title="使用生成器生成一个斐波那契数列"></a>使用生成器生成一个斐波那契数列</h1><p>def fib(n):<br>    a, b = 0, 1<br>    for _ in range(n):<br>        a, b = b, a+b<br>        yield a</p><p>def tuple_op():<br>    print(‘\n=============这是元组操作===========\n’)<br>    t = (‘seinelee’, 24, ‘male’, ‘Beijing’)<br>    print(t)</p><pre><code>t = (&apos;haha&apos;, 24, True, &apos;Beijing&apos;) # 变量t重新引用了新的元组，原来的元组将被垃圾回收print(t)# 元组是无法修改的，不能使用t[0] = &apos;haha&apos; 这种格式进行修改，但是可以把元组转换成列表格式，然后修改t_list = list(t)t_list[0] = &apos;hahaha&apos;print(t_list)t_tuple = tuple(t_list)print(t_tuple)</code></pre><p>def dict_op():<br>    print(‘\n============字典操作=================\n’)<br>    scores = {‘James’: 99, ‘Harden’: 98, ‘Leanord’: 97}<br>    print(scores)</p><pre><code>scores[&apos;Harden&apos;] = 96# 向字典中添加元素scores.update(Paul = 90, Curry = 95)print(scores)print(scores.get(&apos;James&apos;))print(scores.get(&apos;Durant&apos;, 79))# 删除字典中的元素print(scores.popitem())print(scores.popitem())# 删除指定的harden元素print(scores.pop(&apos;Harden&apos;))print(scores)# 清空字典scores.clear()print(scores)</code></pre><p>import os<br>import time</p><h1 id="屏幕上显示跑马灯"><a href="#屏幕上显示跑马灯" class="headerlink" title="屏幕上显示跑马灯"></a>屏幕上显示跑马灯</h1><p>def run():<br>    content = ‘welcome to beijing’<br>    while True:<br>        os.system(‘cls’)<br>        print(content)<br>        time.sleep(0.2)<br>        content = content[1:] + content[0]</p><h1 id="返回给定文件的后缀名"><a href="#返回给定文件的后缀名" class="headerlink" title="返回给定文件的后缀名"></a>返回给定文件的后缀名</h1><p>def get_suffix(filename, has_dot = False):</p><pre><code>pos = filename.rfind(&apos;.&apos;)if 0&lt; pos &lt; len(filename) - 1:    index = pos if has_dot else pos + 1    return filename[index:]else:    return &apos;&apos;</code></pre><p>def is_leap_year(year):<br>    return year % 4 == 0 and year % 100 != 0 or year % 400 == 0<br>def which_day(year, month, day):</p><pre><code>day_of_a_year = [    [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],    [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],][is_leap_year(year)]total_days = 0for mon in range(month-1):    total_days += day_of_a_year[mon]total_days += dayreturn total_days</code></pre><p>from random import randrange, randint, sample</p><p>def display(balls):<br>    for index, ball in enumerate(balls):<br>        if index == len(balls) - 1:<br>            print(‘|’, end=’ ‘)<br>        print(‘%02d’ %ball, end=’ ‘)</p><p>def random_select():<br>    red_balls = [x for x in range(1, 34)]<br>    selected_balls = []</p><pre><code># sample(seq, n) 从序列seq中选择n个随机且独立的元素selected_balls = sample(red_balls, 6)selected_balls.sort()selected_balls.append(randint(1, 16))return selected_balls</code></pre><p>if <strong>name</strong> == ‘<strong>main</strong>‘:<br>    string_op()<br>    list_op()<br>    fib_array = []<br>    for val in fib(10):<br>        fib_array.append(val)<br>    print(fib_array)</p><pre><code>tuple_op()dict_op()print(get_suffix(&apos;name.doc&apos;))dd = [    [1, 2, 3, 4],    [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;]][True]print(dd)print(which_day(1980, 3, 22))n = 5for _ in range(5):    display(random_select())</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;this is my first blog with hexo&lt;br&gt;and I will give some codes bellow, so I can test the what the text display looks like&lt;/p&gt;
&lt;p&gt;def strin
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/06/03/hello-world/"/>
    <id>http://yoursite.com/2019/06/03/hello-world/</id>
    <published>2019-06-03T12:02:11.805Z</published>
    <updated>2019-06-03T12:02:11.805Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
