{"meta":{"title":"Hexo","subtitle":null,"description":null,"author":"John Doe","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"another one","slug":"another-one","date":"2019-06-04T06:25:27.000Z","updated":"2019-06-04T06:27:09.811Z","comments":true,"path":"2019/06/04/another-one/","link":"","permalink":"http://yoursite.com/2019/06/04/another-one/","excerpt":"","text":"试着写一写leetcode刷题感想","categories":[],"tags":[]},{"title":"hello, my first blog with hexo","slug":"hello-my-first-blog-with-hexo","date":"2019-06-03T12:30:46.000Z","updated":"2019-06-03T12:37:43.883Z","comments":true,"path":"2019/06/03/hello-my-first-blog-with-hexo/","link":"","permalink":"http://yoursite.com/2019/06/03/hello-my-first-blog-with-hexo/","excerpt":"","text":"this is my first blog with hexoand I will give some codes bellow, so I can test the what the text display looks like def string_op(): str1 = ‘hello, world!’ print(len(str1)) # 获得字符串首字母大写的拷贝 -- 并不是返回原字符串，而是返回其拷贝，则原字符串不变 print(&apos;获得字符串首字母大写后的拷贝 : &apos;, str1.capitalize()) print(f&apos;看看原来的字符串 : {str1}&apos;) # 获得字符串变大写后的拷贝 print(&apos;获得字符串变大写后的拷贝 : &apos;, str1.upper()) print(&apos;find location of sub string : &apos;, str1.find(&apos;or&apos;)) print(&apos;如果字符串中不存在该子串，那么返回-1 : &apos;, str1.find(&apos;shit&apos;)) # 与find类似的查找子串函数，但是如果找不到子串，则会引发异常 # print(str1.index(&apos;shit&apos;)) print(&apos;index searching : &apos;, str1.index(&apos;or&apos;)) print(&apos;检查字符串是否已指定的字符串开头 : &apos;, str1.startswith(&apos;hel&apos;)) # true or false print(&apos;检查字符串是否以指定的字符串结尾 : &apos;, str1.endswith(&apos;d!&apos;)) print(&apos;将字符串以指定的宽度居中并在两侧填充指定的字符 : \\n&apos;, str1.center(50, &apos;*&apos;)) print(&apos;将字符串以指定的宽度靠右放置左侧填充指定的字符 : \\n&apos;, str1.rjust(50, &quot;*&quot;)) # 字符串切片 print(str1[2:5]) print(str1[1::3]) print(str1[::2]) print(str1[::-1]) # 逆转字符串 print(str1[:-1]) str2 = &apos;nlprs201939&apos; print(&apos;判断字符串是否由数字构成 : &apos;, str2.isdigit()) print(&apos;判断字符串是否由字母构成 : &apos;, str2.isalpha()) print(&apos;判断字符串是否有数字和字母构成 : &apos;, str2.isalnum()) str3 = &apos; seinelee@163.com &apos; print(str3) print(&apos;获得字符串修剪左右两边空格的拷贝 : &apos;, str3.strip())def list_op(): list1 = [1, 3, 5, 7, 100] print(‘\\n=========this is my list1==========\\n’) print(list1) print(list1[-1]) print(list1[:-1]) print(list1[::-1]) list1[2] = ‘change’ print(‘list1 after change : ‘, list1) list1.append(343) # list.insert(index, obj) 用于将指定的对象插入到链表中 list1.insert(1, 400) print(list1) list1 += [&apos;cas&apos;, &apos;nlpr&apos;] print(&apos;another edition : &apos;, list1) # list.remove(obj) 移除列表中某个值的第一个匹配值 list1.remove(3) print(&apos;after remove 3 in list : &apos;, list1) del list1[0] print(list1) # 清空list1 list1.clear() print(list1) print(&apos;\\n==========continue do list ==============\\n&apos;) fruits = [&apos;apple&apos;, &apos;banana&apos;, &apos;grape&apos;, &apos;mango&apos;, &apos;strawberry&apos;] fruits += [&apos;pear&apos;, &apos;watermelon&apos;, &apos;pitch&apos;] for fruit in fruits: print(fruit, end=&apos; &apos;) print() f_list = fruits[1:4] print(f_list) print(&apos;\\n===========列表生成式语法创建列表==========\\n&apos;) import sys # 用列表的生成表达式语法创建列表容器，这样创建列表之后，元素已经准备就绪所以需要耗费较多的内存空间 f = [x for x in range(1, 20)] print(f) f = [x + y for x in &apos;abcde&apos; for y in &apos;ABCDE&apos;] # [&apos;aA&apos;, &apos;aB&apos;, &apos;aC&apos;, &apos;aD&apos;, &apos;aE&apos;, &apos;bA&apos;, &apos;bB&apos;, &apos;bC&apos;, &apos;bD&apos;, &apos;bE&apos;, &apos;cA&apos;, &apos;cB&apos;, &apos;cC&apos;, &apos;cD&apos;, &apos;cE&apos;, &apos;dA&apos;, &apos;dB&apos;, &apos;dC&apos;, &apos;dD&apos;, &apos;dE&apos;, &apos;eA&apos;, &apos;eB&apos;, &apos;eC&apos;, &apos;eD&apos;, &apos;eE&apos;] print(f) f = [x ** 2 for x in range(1, 1000)] print(&apos;这是列表生成式生成的列表对象的大小 ：&apos;, sys.getsizeof(f)) # 查看对象占用内存的字节数 print(f) print(&apos;\\n========使用生成器对象试试=====\\n&apos;) # 使用生成器可以获取到数据但它不会占用的额外的存储空间，注意与列表生成式相对比 f = (x ** 2 for x in range(1, 1000)) print(&apos;这是生成器对象的大小 : &apos;, sys.getsizeof(f)) # 每次需要数据的时候就通过内部的运算得到数据（需要花费额外的时间） mlist = [] # 将生成器中的元素存入一个列表 for val in f: mlist.append(val) print(sys.getsizeof(mlist))使用生成器生成一个斐波那契数列def fib(n): a, b = 0, 1 for _ in range(n): a, b = b, a+b yield a def tuple_op(): print(‘\\n=============这是元组操作===========\\n’) t = (‘seinelee’, 24, ‘male’, ‘Beijing’) print(t) t = (&apos;haha&apos;, 24, True, &apos;Beijing&apos;) # 变量t重新引用了新的元组，原来的元组将被垃圾回收 print(t) # 元组是无法修改的，不能使用t[0] = &apos;haha&apos; 这种格式进行修改，但是可以把元组转换成列表格式，然后修改 t_list = list(t) t_list[0] = &apos;hahaha&apos; print(t_list) t_tuple = tuple(t_list) print(t_tuple)def dict_op(): print(‘\\n============字典操作=================\\n’) scores = {‘James’: 99, ‘Harden’: 98, ‘Leanord’: 97} print(scores) scores[&apos;Harden&apos;] = 96 # 向字典中添加元素 scores.update(Paul = 90, Curry = 95) print(scores) print(scores.get(&apos;James&apos;)) print(scores.get(&apos;Durant&apos;, 79)) # 删除字典中的元素 print(scores.popitem()) print(scores.popitem()) # 删除指定的harden元素 print(scores.pop(&apos;Harden&apos;)) print(scores) # 清空字典 scores.clear() print(scores)import osimport time 屏幕上显示跑马灯def run(): content = ‘welcome to beijing’ while True: os.system(‘cls’) print(content) time.sleep(0.2) content = content[1:] + content[0] 返回给定文件的后缀名def get_suffix(filename, has_dot = False): pos = filename.rfind(&apos;.&apos;) if 0&lt; pos &lt; len(filename) - 1: index = pos if has_dot else pos + 1 return filename[index:] else: return &apos;&apos;def is_leap_year(year): return year % 4 == 0 and year % 100 != 0 or year % 400 == 0def which_day(year, month, day): day_of_a_year = [ [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], ][is_leap_year(year)] total_days = 0 for mon in range(month-1): total_days += day_of_a_year[mon] total_days += day return total_daysfrom random import randrange, randint, sample def display(balls): for index, ball in enumerate(balls): if index == len(balls) - 1: print(‘|’, end=’ ‘) print(‘%02d’ %ball, end=’ ‘) def random_select(): red_balls = [x for x in range(1, 34)] selected_balls = [] # sample(seq, n) 从序列seq中选择n个随机且独立的元素 selected_balls = sample(red_balls, 6) selected_balls.sort() selected_balls.append(randint(1, 16)) return selected_ballsif name == ‘main‘: string_op() list_op() fib_array = [] for val in fib(10): fib_array.append(val) print(fib_array) tuple_op() dict_op() print(get_suffix(&apos;name.doc&apos;)) dd = [ [1, 2, 3, 4], [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;, &apos;d&apos;] ][True] print(dd) print(which_day(1980, 3, 22)) n = 5 for _ in range(5): display(random_select())","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-06-03T12:02:11.805Z","updated":"2019-06-03T12:02:11.805Z","comments":true,"path":"2019/06/03/hello-world/","link":"","permalink":"http://yoursite.com/2019/06/03/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}